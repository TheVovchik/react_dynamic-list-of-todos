{"version":3,"sources":["types/SortTypes.ts","api.ts","components/TodoContext/TodoContext.tsx","components/utils/debounce.ts","components/UserContext/UserContext.tsx","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["SortTypes","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getTodos","getUser","userId","TodoContext","React","createContext","todos","sortType","ALL","query","appliedQuery","isLoaded","isError","getTodosFromServer","changeSortType","applyQuery","handleSearch","clearSearchBar","TodoProvider","children","useState","setTodos","setSortType","setQuery","setAppliedQuery","setIsLoaded","setIsError","a","newTodos","Error","useCallback","f","timerId","clearTimeout","args","debounce","contextValue","event","currentValue","target","value","Provider","UserContext","selectedUser","selectedTodoId","userInfo","getUserFromServer","handleClose","selectCurrentTodo","UserProvider","setSelectedUser","setSelectedTodoId","setUserInfo","user","id","TodoItem","todo","title","completed","useContext","isSelected","className","classNames","type","onClick","TodoList","currentQuery","filterTodosByComplete","filter","filtredTodos","currentTodos","ACTIVE","COMPLETED","getVisibleTodos","visibleTodos","toLowerCase","includes","map","Fragment","TodoFilter","onChange","placeholder","style","pointerEvents","Loader","TodoModal","useEffect","currentTodo","find","href","email","name","App","isTodoDownload","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e2c2f307.chunk.js","sourcesContent":["export enum SortTypes {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useState, useCallback } from 'react';\nimport { getTodos } from '../../api';\nimport { SortTypes } from '../../types/SortTypes';\nimport { Todo } from '../../types/Todo';\nimport { debounce } from '../utils/debounce';\n\ntype Context = {\n  todos: Todo[],\n  sortType: SortTypes,\n  query: string,\n  appliedQuery: string,\n  isLoaded: boolean,\n  isError: boolean,\n\n  getTodosFromServer: () => void,\n  changeSortType: (event: React.ChangeEvent<HTMLSelectElement>) => void,\n  applyQuery: ((arg: string) => void),\n  handleSearch: (event: React.ChangeEvent<HTMLInputElement>) => void,\n  clearSearchBar: () => void,\n};\n\nexport const TodoContext = React.createContext<Context>({\n  todos: [],\n  sortType: SortTypes.ALL,\n  query: '',\n  appliedQuery: '',\n  isLoaded: true,\n  isError: false,\n\n  getTodosFromServer: () => {},\n  changeSortType: () => {},\n  applyQuery: () => {},\n  handleSearch: () => {},\n  clearSearchBar: () => {},\n});\n\nexport const TodoProvider: React.FC = ({ children }) => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [sortType, setSortType] = useState<SortTypes>(SortTypes.ALL);\n  const [query, setQuery] = useState('');\n  const [appliedQuery, setAppliedQuery] = useState('');\n  const [isLoaded, setIsLoaded] = useState(true);\n  const [isError, setIsError] = useState(false);\n\n  async function getTodosFromServer() {\n    try {\n      const newTodos = await getTodos();\n\n      setIsError(false);\n      setIsLoaded(false);\n      setTodos(newTodos);\n    } catch {\n      setIsError(true);\n      setIsLoaded(false);\n      throw new Error('Can\\'t load list of todos');\n    }\n  }\n\n  function changeSortType(event: React.ChangeEvent<HTMLSelectElement>) {\n    const currentValue = event.target.value as SortTypes;\n\n    setSortType(currentValue);\n  }\n\n  const applyQuery = useCallback(debounce(setAppliedQuery, 1000),\n    []);\n\n  const handleSearch = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n    applyQuery(event.target.value);\n  };\n\n  const clearSearchBar = () => {\n    setQuery('');\n    setAppliedQuery('');\n  };\n\n  const contextValue = {\n    todos,\n    sortType,\n    query,\n    appliedQuery,\n    isLoaded,\n    isError,\n\n    getTodosFromServer,\n    changeSortType,\n    applyQuery,\n    handleSearch,\n    clearSearchBar,\n  };\n\n  return (\n    <TodoContext.Provider value={contextValue}>\n      {children}\n    </TodoContext.Provider>\n  );\n};\n","export function debounce<F extends (...args: any) => any>(f: F, delay: number) {\n  let timerId: NodeJS.Timeout;\n\n  return (...args: any) => {\n    clearTimeout(timerId);\n    timerId = setTimeout(f, delay, ...args);\n  };\n}\n","import React, { useState } from 'react';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\n\ntype Context = {\n  selectedUser: number,\n  selectedTodoId: number,\n  userInfo: User | null,\n\n  getUserFromServer: () => void,\n  handleClose: () => void,\n  selectCurrentTodo: (id: number, userId: number) => void\n};\n\nexport const UserContext = React.createContext<Context>({\n  selectedUser: 0,\n  selectedTodoId: 0,\n  userInfo: null,\n\n  getUserFromServer: () => {},\n  handleClose: () => {},\n  selectCurrentTodo: () => {},\n});\n\nexport const UserProvider: React.FC = ({ children }) => {\n  const [selectedUser, setSelectedUser] = useState(0);\n  const [selectedTodoId, setSelectedTodoId] = useState(0);\n  const [userInfo, setUserInfo] = useState<User | null>(null);\n\n  async function getUserFromServer() {\n    const user = await getUser(selectedUser);\n\n    setUserInfo(user);\n  }\n\n  function handleClose() {\n    setUserInfo(null);\n    setSelectedUser(0);\n    setSelectedTodoId(0);\n  }\n\n  const selectCurrentTodo = (id: number, userId: number) => {\n    setSelectedUser(userId);\n    setSelectedTodoId(id);\n  };\n\n  const contextValue = {\n    selectedUser,\n    selectedTodoId,\n    userInfo,\n\n    getUserFromServer,\n    handleClose,\n    selectCurrentTodo,\n  };\n\n  return (\n    <UserContext.Provider value={contextValue}>\n      {children}\n    </UserContext.Provider>\n  );\n};\n","import { FC, useContext } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { UserContext } from '../UserContext';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoItem: FC<Props> = ({ todo }) => {\n  const {\n    id, title, completed, userId,\n  } = todo;\n\n  const {\n    selectedTodoId,\n    selectCurrentTodo,\n  } = useContext(UserContext);\n  const isSelected = selectedTodoId === id;\n\n  return (\n    <tr\n      key={id}\n      data-cy=\"todo\"\n      className={classNames({ 'has-background-info-light': isSelected })}\n    >\n      <td className=\"is-vcentered\">{id}</td>\n      <td className=\"is-vcentered\">\n        {completed && (\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        )}\n      </td>\n      <td className=\"is-vcentered is-expanded\">\n        <p\n          className={classNames({\n            'has-text-danger': !completed,\n            'has-text-success': completed,\n          })}\n        >\n          {title}\n        </p>\n      </td>\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={() => selectCurrentTodo(id, userId)}\n        >\n          <span className=\"icon\">\n            <i className={classNames(\n              'far',\n              {\n                'fa-eye': !isSelected,\n                'fa-eye-slash': isSelected,\n              },\n            )}\n            />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React, { useContext } from 'react';\nimport { SortTypes } from '../../types/SortTypes';\nimport { Todo } from '../../types/Todo';\nimport { TodoContext } from '../TodoContext';\nimport { TodoItem } from '../TodoItem';\n\nexport const TodoList: React.FC = () => {\n  const { todos, sortType, appliedQuery } = useContext(TodoContext);\n\n  const filterTodosByComplete = (completed: boolean) => {\n    return todos.filter(todo => todo.completed === completed);\n  };\n\n  const filterTodosByQuery = (todosList: Todo[], currentQuery: string) => {\n    return todosList\n      .filter(todo => todo.title\n        .toLowerCase()\n        .includes(currentQuery.toLowerCase()));\n  };\n\n  const getVisibleTodos = (currentTodos: Todo[]) => {\n    switch (sortType) {\n      case SortTypes.ALL:\n        return currentTodos;\n\n      case SortTypes.ACTIVE:\n        return filterTodosByComplete(false);\n\n      case SortTypes.COMPLETED:\n        return filterTodosByComplete(true);\n      default:\n        return currentTodos;\n    }\n  };\n\n  const filtredTodos: Todo[] = getVisibleTodos(todos);\n  const visibleTodos: Todo[] = filterTodosByQuery(filtredTodos, appliedQuery);\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {visibleTodos.map(todo => (\n          <React.Fragment key={todo.id}>\n            <TodoItem todo={todo} />\n          </React.Fragment>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { FC, useContext } from 'react';\nimport { SortTypes } from '../../types/SortTypes';\nimport { TodoContext } from '../TodoContext';\n\nexport const TodoFilter: FC = () => {\n  const {\n    query,\n    handleSearch,\n    clearSearchBar,\n  } = useContext(TodoContext);\n\n  const { changeSortType } = useContext(TodoContext);\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={changeSortType}\n          >\n            <option value={SortTypes.ALL}>All</option>\n            <option value={SortTypes.ACTIVE}>Active</option>\n            <option value={SortTypes.COMPLETED}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleSearch}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            <button\n              aria-label=\"delete\"\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={clearSearchBar}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useContext, useEffect } from 'react';\nimport classNames from 'classnames';\nimport { Loader } from '../Loader';\nimport { UserContext } from '../UserContext';\nimport { Todo } from '../../types/Todo';\nimport { TodoContext } from '../TodoContext';\n\nexport const TodoModal: React.FC = () => {\n  const {\n    selectedTodoId,\n    userInfo,\n    getUserFromServer,\n    handleClose,\n  } = useContext(UserContext);\n\n  const { todos } = useContext(TodoContext);\n\n  useEffect(() => {\n    getUserFromServer();\n  }, []);\n\n  const currentTodo: Todo | null = todos\n    .find(todo => todo.id === selectedTodoId) || null;\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!userInfo ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodoId}`}\n            </div>\n\n            <button\n              aria-label=\"close\"\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={handleClose}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {currentTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              <strong className={classNames(\n                {\n                  'has-text-danger': !currentTodo?.completed,\n                  'has-text-success': currentTodo?.completed,\n                },\n              )}\n              >\n                {currentTodo?.completed ? 'Done' : 'Planned'}\n              </strong>\n\n              {' by '}\n\n              <a href={`mailto:${userInfo.email}`}>\n                {userInfo.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useContext, useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { UserContext } from './components/UserContext';\nimport { TodoContext } from './components/TodoContext';\n\nexport const App: React.FC = () => {\n  const {\n    selectedTodoId,\n  } = useContext(UserContext);\n\n  const {\n    isLoaded,\n    isError,\n    getTodosFromServer,\n  } = useContext(TodoContext);\n\n  useEffect(() => {\n    getTodosFromServer();\n  }, []);\n\n  const isTodoDownload = isError\n    ? <p>something went wrong</p>\n    : <TodoList />;\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoaded\n                ? <Loader />\n                : isTodoDownload}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodoId && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\nimport { TodoProvider } from './components/TodoContext';\nimport { UserProvider } from './components/UserContext';\n\nReactDOM.render(\n  <TodoProvider>\n    <UserProvider>\n      <App />\n    </UserProvider>\n  </TodoProvider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}