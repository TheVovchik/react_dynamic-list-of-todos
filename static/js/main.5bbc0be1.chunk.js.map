{"version":3,"sources":["components/UserContext/UserContext.tsx","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["UserContext","React","createContext","todos","setTodos","selectedUser","setSelectedUser","selectedTodoId","setSelectedTodoId","userInfo","setUserInfo","sortType","setSortType","query","setQuery","appliedQuery","setAppliedQuery","UserProvider","children","useState","contextValue","useMemo","Provider","value","TodoItem","todo","id","title","completed","userId","useContext","isSelected","className","classNames","type","onClick","TodoList","currentQuery","filterTodosByComplete","filter","filtredTodos","currentTodos","getVisibleTodos","visibleTodos","toLowerCase","includes","map","Fragment","TodoFilter","applyQuery","useCallback","f","delay","timerId","arg","clearTimeout","setTimeout","debounce","onChange","event","target","placeholder","style","pointerEvents","get","url","fullURL","Promise","resolve","then","fetch","res","json","Loader","TodoModal","getUserFromServer","a","user","useEffect","currentTodo","find","href","email","name","App","getTodosFromServer","newTodos","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5bbc0be1.chunk.js","sourcesContent":["import React, { useState, useMemo } from 'react';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\n\ntype Context = {\n  todos: Todo[],\n  setTodos: (todosFromServer: Todo[]) => void,\n  selectedUser: number,\n  setSelectedUser: (selectedUser: number) => void,\n  selectedTodoId: number,\n  setSelectedTodoId: (selectedTodoId: number) => void,\n  userInfo: User | null,\n  setUserInfo: (userData: User | null) => void,\n  sortType: string,\n  setSortType: (type: string) => void,\n  query: string,\n  setQuery: (newQuery: string) => void,\n  appliedQuery: string,\n  setAppliedQuery: (finalQuery: string) => void,\n};\n\nexport const UserContext = React.createContext<Context>({\n  todos: [],\n  setTodos: () => {},\n  selectedUser: 0,\n  setSelectedUser: () => {},\n  selectedTodoId: 0,\n  setSelectedTodoId: () => {},\n  userInfo: null,\n  setUserInfo: () => {},\n  sortType: 'all',\n  setSortType: () => {},\n  query: '',\n  setQuery: () => {},\n  appliedQuery: '',\n  setAppliedQuery: () => {},\n});\n\nexport const UserProvider: React.FC = ({ children }) => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedUser, setSelectedUser] = useState(0);\n  const [selectedTodoId, setSelectedTodoId] = useState(0);\n  const [userInfo, setUserInfo] = useState<User | null>(null);\n  const [sortType, setSortType] = useState('all');\n  const [query, setQuery] = useState('');\n  const [appliedQuery, setAppliedQuery] = useState('');\n\n  const contextValue = useMemo(() => ({\n    todos,\n    setTodos,\n    selectedUser,\n    setSelectedUser,\n    selectedTodoId,\n    setSelectedTodoId,\n    userInfo,\n    setUserInfo,\n    sortType,\n    setSortType,\n    query,\n    setQuery,\n    appliedQuery,\n    setAppliedQuery,\n  }), [\n    todos,\n    selectedUser,\n    userInfo,\n    selectedTodoId,\n    sortType,\n    query,\n    appliedQuery]);\n\n  return (\n    <UserContext.Provider value={contextValue}>\n      {children}\n    </UserContext.Provider>\n  );\n};\n","import { FC, useContext } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { UserContext } from '../UserContext';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoItem: FC<Props> = ({ todo }) => {\n  const {\n    id, title, completed, userId,\n  } = todo;\n\n  const {\n    selectedTodoId,\n    setSelectedUser,\n    setSelectedTodoId,\n  } = useContext(UserContext);\n  const isSelected = selectedTodoId === id;\n\n  return (\n    <tr\n      key={id}\n      data-cy=\"todo\"\n      className={classNames({ 'has-background-info-light': isSelected })}\n    >\n      <td className=\"is-vcentered\">{id}</td>\n      <td className=\"is-vcentered\">\n        {completed && (\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        )}\n      </td>\n      <td className=\"is-vcentered is-expanded\">\n        <p\n          className={classNames({\n            'has-text-danger': !completed,\n            'has-text-success': completed,\n          })}\n        >\n          {title}\n        </p>\n      </td>\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={() => {\n            setSelectedUser(userId);\n            setSelectedTodoId(id);\n          }}\n        >\n          <span className=\"icon\">\n            <i className={classNames(\n              'far',\n              {\n                'fa-eye': !isSelected,\n                'fa-eye-slash': isSelected,\n              },\n            )}\n            />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React, { useContext } from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoItem } from '../TodoItem';\nimport { UserContext } from '../UserContext';\n\nexport const TodoList: React.FC = () => {\n  const {\n    todos,\n    sortType,\n    appliedQuery,\n  } = useContext(UserContext);\n  const filterTodosByComplete = (completed: boolean) => {\n    return todos.filter(todo => todo.completed === completed);\n  };\n\n  const filterTodosByQuery = (todosList: Todo[], currentQuery: string) => {\n    return todosList\n      .filter(todo => todo.title\n        .toLowerCase()\n        .includes(currentQuery.toLowerCase()));\n  };\n\n  const getVisibleTodos = (currentTodos: Todo[]) => {\n    switch (sortType) {\n      case 'all':\n        return currentTodos;\n\n      case 'active':\n        return filterTodosByComplete(false);\n\n      case 'completed':\n        return filterTodosByComplete(true);\n      default:\n        return currentTodos;\n    }\n  };\n\n  const filtredTodos: Todo[] = getVisibleTodos(todos);\n  const visibleTodos: Todo[] = filterTodosByQuery(filtredTodos, appliedQuery);\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {visibleTodos.map(todo => (\n          <React.Fragment key={todo.id}>\n            <TodoItem todo={todo} />\n          </React.Fragment>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { FC, useContext, useCallback } from 'react';\nimport { UserContext } from '../UserContext';\n\nfunction debounce(f:(finalQuery: string) => void, delay: number) {\n  let timerId: NodeJS.Timeout;\n\n  return (arg: string) => {\n    clearTimeout(timerId);\n    timerId = setTimeout(f, delay, arg);\n  };\n}\n\nexport const TodoFilter: FC = () => {\n  const {\n    setSortType,\n    query,\n    setQuery,\n    setAppliedQuery,\n  } = useContext(UserContext);\n  const changeSortType = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    setSortType(value);\n  };\n\n  const applyQuery = useCallback(debounce(setAppliedQuery, 1000),\n    []);\n  const handleSearch = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n    applyQuery(event.target.value);\n  };\n\n  const clearSearchBar = () => {\n    setQuery('');\n    setAppliedQuery('');\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={changeSortType}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleSearch}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            <button\n              aria-label=\"delete\"\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={clearSearchBar}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useContext, useEffect } from 'react';\nimport classNames from 'classnames';\nimport { getUser } from '../../api';\nimport { Loader } from '../Loader';\nimport { UserContext } from '../UserContext';\nimport { Todo } from '../../types/Todo';\n\nexport const TodoModal: React.FC = () => {\n  const {\n    todos,\n    selectedUser,\n    selectedTodoId,\n    setUserInfo,\n    userInfo,\n    setSelectedUser,\n    setSelectedTodoId,\n  } = useContext(UserContext);\n\n  const getUserFromServer = async () => {\n    const user = await getUser(selectedUser);\n\n    setUserInfo(user);\n  };\n\n  useEffect(() => {\n    getUserFromServer();\n  }, []);\n\n  const currentTodo: Todo | undefined = todos\n    .find(todo => todo.id === selectedTodoId);\n\n  const handleClose = () => {\n    setUserInfo(null);\n    setSelectedUser(0);\n    setSelectedTodoId(0);\n  };\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!userInfo ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodoId}`}\n            </div>\n\n            <button\n              aria-label=\"close\"\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={handleClose}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {currentTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              <strong className={classNames(\n                {\n                  'has-text-danger': !currentTodo?.completed,\n                  'has-text-success': currentTodo?.completed,\n                },\n              )}\n              >\n                {currentTodo?.completed ? 'Done' : 'Planned'}\n              </strong>\n\n              {' by '}\n\n              <a href={`mailto:${userInfo.email}`}>\n                {userInfo.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useContext, useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { UserContext } from './components/UserContext';\n\nexport const App: React.FC = () => {\n  const {\n    todos,\n    setTodos,\n    selectedTodoId,\n  } = useContext(UserContext);\n\n  const getTodosFromServer = async () => {\n    const newTodos = await getTodos();\n\n    setTodos(newTodos);\n  };\n\n  useEffect(() => {\n    getTodosFromServer();\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {todos.length === 0\n                ? <Loader />\n                : <TodoList />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodoId && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\nimport { UserProvider } from './components/UserContext';\n\nReactDOM.render(\n  <UserProvider>\n    <App />\n  </UserProvider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}